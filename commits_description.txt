This file contains the description of all the work done and new concepts learned before each commit.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 1:
Started with expense tracker

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 2:
Created expense class to store info realted to expenses. Used uuid package for generating unique id for each expense.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 3:
Added a list of categories for the expenses in expense.dart using enum.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 4:
Added dummy expenses.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 5:
Created a seperate widget- ExpensesList() for showing expenses.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 6:
Organized code by creating relavant folders. 
Created a ExpenseItem widget for displaying the data of single transaction appropriately in the card widget. 
Learn about new widget Spacer().

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 7:
Worked on ecpense_item.dart file. Created dynamic icons for each category using map. Also formatted date using DateFormat class from intl package. 
Learned about get keyword while writing function for formattedDate.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 8:
Wrote a function for displaying bottomModelSheet after clicking on the icon in the appbar.
Learned the concept of "context" argument.
We get a context automatically as a input to build method. It is passed to build method by flutter.
If our inner class extends a state then flutter automatically add a context property to the class,
more specifically this property is provided by the state parent class.
This context property made available by flutter can be used in showModelBottomSheet() method.

IMPORTANT:
What is context => Context is basically an object full of metadata managed by flutter that belongs to the specific widget.
So every widget has its specific context and that contains metadata information related to the widget and the widget's position in the overall user interface.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 9:
Started with creating a widget that will be display after clicking on the add icon in the appbar.
Used the TextField() widget for accepting the input from user in the text format. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 10:
Wrote the code for getting user input for every keystroke. Also added a elevated button for adding expense in the bottomModelSheet.
Used onChanged parameter of TextField for getting input from keyboard.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 11:
In the previous commit we decleared a variable and stored the string written by user in the text field in that variable. We wrote the code like this,
var _inputTitle;
  void _getExpenseTitle(String title) {
    _inputTitle = title;
  }

But for this, we have a better approach of using controller instead of using any variable and method for storing string in that variable.
We can make use of textEditingController class. First we will create an object of this class
and then we can pass that object to text field to let flutter do all the heavy lifting of storing the entered value.


Code for this will be like =>
final _inputController = TextEditingController();

  @override
  void dispose() {
    _inputController.dispose();
    super.dispose();
  }


Important Notes:
- While using textEditingController there is 1 important thing to keep in mind is that when we create a textEditingController we also have to tell flutter
to delete that controller when the widget is not nedded any more i.e. in this case when the model overlay is closed.
Otherwise this textEditingController will kept in memory even though it no loger needed.

- Thats why while using textEditingController we have to add special dispose() method to state class.
"dispose", like "initstate" and "build", is a part of statefulwidget's lifecycle.
It's called automatically by flutter when the widget and its state are about to destoryed (removed from the UI).

- only "State" classes can implement "dispose" method thats why we have used statefulwidget here.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 12:
Added another TextField and textEditingController for getting amount of expense from user.
Used a parameter "prefix" of inputdecoration field to add a $ sign in front of amount when user try to enter any amount.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 13:
Added functionality to move back to previous screen on pressing the cancel button.
Used Navigator class for moving one screen back. The code is like, Navigator.pop(context);


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 14:
Added a datepicker for selecting date for the expense. Used the DateTime class for setting the calender in which set a date from specific duration,
Here we have set the past date as date 1 year before of today and last date as the today's date because the date of expense can't be future date.

void _presentDatePicker() {
    final now = DateTime.now();
    final firstDate = DateTime(now.year - 1, now.month, now.day);
    showDatePicker(context: context, firstDate: firstDate, lastDate: now);
  }

In above code we have created a method _presentDatePicker which will be passes to the opressesd paramenter of IconButton.
In the above method first we have created a object now of DateTime class. Now using that now object we have accessed the current year, month and date.
After that using the showDatePicker inbuilt function we set the firstdate
i.e. the past date upto which user can add expense and lastDate i.e. today's date as user can't add future expense today.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 15:

Worked with future to handle data from futures.
The inbuilt function showDatePicker will return a date but it is wrapped inside a future.
Future is an important datattype in dart which is basically an object that wrapes the value which you don't have yet but will have in future. 
In our case we want a variable which stores a selected date by user from the calender.
For this we can create an object and store the date but the problem here is that the date selected by user will not be available immediately but after some time.
So while declearing such variable it not possible because it will cause an error as it doesn't got the value we will specify in that variable immediately.

So for running code smoothly and since the showDatePicker wrapes the date with future we have to modify our code accordingly.
 We will modify the code as,

 void _presentDatePicker() async {
    final now = DateTime.now();
    final firstDate = DateTime(now.year - 1, now.month, now.day);
    final _pickedDate = await showDatePicker(
        context: context, firstDate: firstDate, lastDate: now);
 }

 We have added the async keyword after the function and we have added the await keyword before the showDatePicker function
which tells the flutter that the value of this function will not available immediately but will be available after some time.
 And due to this we can now declare the variable which stores the selectedDate by user and it will not cause any error.

 Now we have stored the date picked by user in _pickedDate variable but even though if we try to get it it will not be displyed.
 It is because when we execute the code the build method in that widget will run once but after selecting the date we need to change the UI
 and for this we have to run build method once angin with the updated change.
 For this purpose we have to call the setState() method which will run build method again and 
 inside that build method we have to write code which we is going to chnage the UI.
 In our case for this, first we have created a _selectedDate variable of type DateTime and in the setState() method we assigned the selectedDate value as the _pickedDate. 
 the setState() will run the build method once again and assign the value in _selectedDate as the _pickedDate.

 
    setState(() {
      _selectedDate = _pickedDate;
    });


Now for dispalying the date we will use a ternery operator and format class of intl package which we also used in the past while writing the formattedDate function in expense.dart file.

Text(_selectedDate == null ? "No date selected": format.format(_selectedDate!)),

One thing to note in the above line is we have used the "!" after _selectedDate to tell flutter that we know that the _selectedDate will not be null.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 16:

Worked on the dropdown menu of categories of expenses while adding new Expense.

 DropdownButton(
                  value: _selectedCategory,
                  items: Category.values
                      .map(
                        (category) => DropdownMenuItem(
                          value: category,
                          child: Text(category.name.toUpperCase()),
                        ),
                      )
                      .toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedCategory = value!;
                    });
                  }),


Added another child, "DropdownButton," which takes two named arguments: items and onChanged.
The items argument requires a list of items of type DropdownMenuItem, and onChanged takes a function with a single argument to represent each item in the list.

For providing the list to the items argument, we have used the Category enum created in the past. 
From this Category enum, we can access the values defined in it, such as amount, title, date, etc. 
Additionally, we can access another property called "values," which gives the list of categories (i.e., Category.values gives a list of categories of type Category).

To convert the type of the list from Category to DropdownMenuItem, we utilized the map function. 
This function automatically executes a specified function for every list item. In the code, the word "category" inside the map function acts as an iterable object, and Dart assigns values to it. 
This mechanism is similar to a for loop, where the function executes for each item, and the current item is represented by the "category" keyword.

The map function changes the type of items from Category to DropdownMenuItem. 
Although it is iterable and not of type list, we convert it into a list using the .toList() method.

The onChanged() function alters the category if the user selects any category from the dropdown menu. 
The onChanged function takes the value selected by the user from the dropdown menu. To store the selected value, we created a variable _selectedCategory and initialized it with the category of "food."

The DropdownButton takes one more argument called value, determining which item should be displayed to the user on the screen. 
Initially, we assigned the value as _selectedCategory, so when the app runs for the first time, the selected value will be "food." 
If the user changes the value from the dropdown menu, it will be updated. When the user selects any category, the onChanged function is called by default. 
Inside the onChanged function, we used the setState method to assign the new value to _selectedCategory and rerun the build method. 
As a result, the selected category will be displayed to the user.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 16:
Added a code for checking is all the fields are filled before adding the expense.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 17:
Added a alert dialog box for checking the input is valid or not.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 18:
Added functionality of adding a new expense and then it will show in the list of expenses.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit 19:
Added Functionality to remove expense on swapping it left or right.

-----------------------------------------------------------------------------------------------------------------------------------------


Commit 20:
Added a functionality to show snackbar after deleteing expense.
Undo button in snackbar to undo the delete function and also added functionality to show different widget if there are no expenses added by user.

--------------------------------------------------------------------------------------------------------------------------------------------

Commit 21:

Added a custom colorScheme for the application in main.dart.

-----------------------------------------------------------------------------------------------------------------------------------------